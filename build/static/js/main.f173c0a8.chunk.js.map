{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["Turn","SquareStatus","library","add","faCoffee","faChessKing","faChessPawn","initialPiecesPosition","x","y","type","Black","White","clearSelected","coordinate","availables","initialBoardState","active","App","useState","board","setBoard","Player1","turn","setTurn","selectedCoord","setSelectedCoord","boardState","setBoardState","useEffect","initialize","i","row","j","push","id","toString","status","Free","forEach","isKing","cleanSelected","processAvailables","pieceCoordX","pieceCoordY","availableCoords","renderSquare","infos","content","isEmpty","icon","color","size","isSelected","isSelectedCSS","isAvailable","length","isAvailableCSS","key","className","onClick","a","console","log","player1turn","player1Piece","player2turn","Player2","player2Piece","newBoard","map","slice","selectedRef","newInfo","winner","boardToPrint","printBoard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f173c0a8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n\tfaCoffee,\n\tfaChessKing,\n\tfaChessPawn,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nlibrary.add(faCoffee, faChessKing, faChessPawn);\n\nexport enum Turn {\n\tPlayer1,\n\tPlayer2,\n}\n\nexport enum SquareStatus {\n\tWhite,\n\tBlack,\n\tFree,\n}\n\nexport type SquareState = {\n\tid: string;\n\tstatus: SquareStatus;\n\tx: number;\n\ty: number;\n\tisKing?: boolean;\n};\nconst initialPiecesPosition = [\n\t{ x: 0, y: 2, type: SquareStatus.Black },\n\t{ x: 0, y: 5, type: SquareStatus.Black },\n\t{ x: 0, y: 6, type: SquareStatus.Black },\n\t{ x: 0, y: 7, type: SquareStatus.Black },\n\t{ x: 0, y: 10, type: SquareStatus.Black },\n\t{ x: 1, y: 1, type: SquareStatus.Black },\n\t{ x: 1, y: 11, type: SquareStatus.Black },\n\t{ x: 2, y: 0, type: SquareStatus.Black },\n\t{ x: 2, y: 12, type: SquareStatus.Black },\n\t{ x: 5, y: 0, type: SquareStatus.Black },\n\t{ x: 5, y: 12, type: SquareStatus.Black },\n\t{ x: 6, y: 0, type: SquareStatus.Black },\n\t{ x: 6, y: 12, type: SquareStatus.Black },\n\t{ x: 7, y: 0, type: SquareStatus.Black },\n\t{ x: 7, y: 12, type: SquareStatus.Black },\n\t{ x: 10, y: 0, type: SquareStatus.Black },\n\t{ x: 10, y: 12, type: SquareStatus.Black },\n\t{ x: 11, y: 1, type: SquareStatus.Black },\n\t{ x: 11, y: 11, type: SquareStatus.Black },\n\t{ x: 12, y: 2, type: SquareStatus.Black },\n\t{ x: 12, y: 5, type: SquareStatus.Black },\n\t{ x: 12, y: 6, type: SquareStatus.Black },\n\t{ x: 12, y: 7, type: SquareStatus.Black },\n\t{ x: 12, y: 10, type: SquareStatus.Black },\n\t{ x: 4, y: 6, type: SquareStatus.White },\n\t{ x: 5, y: 5, type: SquareStatus.White },\n\t{ x: 5, y: 6, type: SquareStatus.White },\n\t{ x: 5, y: 7, type: SquareStatus.White },\n\t{ x: 6, y: 4, type: SquareStatus.White },\n\t{ x: 6, y: 5, type: SquareStatus.White },\n\t{ x: 6, y: 6, type: SquareStatus.White },\n\t{ x: 6, y: 7, type: SquareStatus.White },\n\t{ x: 6, y: 8, type: SquareStatus.White },\n\t{ x: 7, y: 5, type: SquareStatus.White },\n\t{ x: 7, y: 6, type: SquareStatus.White },\n\t{ x: 7, y: 7, type: SquareStatus.White },\n\t{ x: 8, y: 6, type: SquareStatus.White },\n];\ntype Coordinates = {\n\tx: number | null;\n\ty: number | null;\n};\nexport type Selected = {\n\tcoordinate: Coordinates | null;\n\tavailables: Coordinates[] | null;\n};\nconst clearSelected: Selected = {\n\tcoordinate: null,\n\tavailables: null,\n};\nexport type BoardState = {\n\tactive: boolean;\n\twinner?: Turn;\n};\nconst initialBoardState = { active: true };\nfunction App() {\n\tconst size = 13;\n\tconst [board, setBoard] = useState<SquareState[][] | undefined>();\n\tconst [turn, setTurn] = useState<Turn>(Turn.Player1);\n\tconst [selectedCoord, setSelectedCoord] = useState<Selected>(clearSelected);\n\tconst [boardState, setBoardState] = useState<BoardState>(initialBoardState);\n\tuseEffect(() => {\n\t\tif (!board) {\n\t\t\tinitialize();\n\t\t}\n\t}, []);\n\n\tconst reset = () => {\n\t\tinitialize();\n\t\tsetTurn(Turn.Player1);\n\t\tsetSelectedCoord(clearSelected);\n\t\tsetBoardState(initialBoardState);\n\t};\n\n\tconst initialize = () => {\n\t\tconst board: SquareState[][] = [];\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tconst row: SquareState[] = [];\n\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\trow.push({\n\t\t\t\t\tid: i.toString() + j.toString(),\n\t\t\t\t\tstatus: SquareStatus.Free,\n\t\t\t\t\tx: i,\n\t\t\t\t\ty: j,\n\t\t\t\t});\n\t\t\t}\n\t\t\tboard.push(row);\n\t\t}\n\t\tinitialPiecesPosition.forEach(\n\t\t\t(coordinate: { x: number; y: number; type: SquareStatus }) => {\n\t\t\t\tif (coordinate.type === SquareStatus.Black) {\n\t\t\t\t\tboard[coordinate.x][coordinate.y].status = SquareStatus.Black;\n\t\t\t\t} else {\n\t\t\t\t\tboard[coordinate.x][coordinate.y].status = SquareStatus.White;\n\t\t\t\t\tif (coordinate.x === 6 && coordinate.y === 6) {\n\t\t\t\t\t\tboard[coordinate.x][coordinate.y].isKing = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tsetBoard(board);\n\t};\n\n\tfunction cleanSelected() {\n\t\tsetSelectedCoord({\n\t\t\tcoordinate: null,\n\t\t\tavailables: null,\n\t\t});\n\t}\n\tfunction changeTurn() {\n\t\t//console.log('changing turn');\n\t\tsetTurn(turn === Turn.Player1 ? Turn.Player2 : Turn.Player1);\n\t}\n\tconst processAvailables = (pieceCoordX: number, pieceCoordY: number) => {\n\t\tconst availableCoords = [];\n\t\tif (board) {\n\t\t\t//calc movement to bottom\n\t\t\tfor (let i = pieceCoordX + 1; i < size; i++) {\n\t\t\t\tif (board[i][pieceCoordY].status === SquareStatus.Free) {\n\t\t\t\t\tavailableCoords.push({ x: i, y: pieceCoordY });\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//calc movement to top\n\t\t\tfor (let i = pieceCoordX - 1; i >= 0; i--) {\n\t\t\t\tif (board[i][pieceCoordY].status === SquareStatus.Free) {\n\t\t\t\t\tavailableCoords.push({ x: i, y: pieceCoordY });\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//calc movement to left\n\t\t\tfor (let i = pieceCoordY - 1; i >= 0; i--) {\n\t\t\t\tif (board[pieceCoordX][i].status === SquareStatus.Free) {\n\t\t\t\t\tavailableCoords.push({ x: pieceCoordX, y: i });\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//calc movement to right\n\t\t\tfor (let i = pieceCoordY + 1; i < size; i++) {\n\t\t\t\tif (board[pieceCoordX][i].status === SquareStatus.Free) {\n\t\t\t\t\tavailableCoords.push({ x: pieceCoordX, y: i });\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn availableCoords;\n\t};\n\n\tfunction isCorner(x: number, y: number): boolean {\n\t\tif (x === 0 && y === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x === 0 && y === size - 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x === size - 1 && y === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (x === size - 1 && y === size - 1) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction renderSquare(infos: SquareState) {\n\t\tlet isEmpty = false;\n\t\tif (infos.status === SquareStatus.Free) {\n\t\t\tisEmpty = true;\n\t\t}\n\t\tlet content;\n\t\tif (!isEmpty) {\n\t\t\tcontent = (\n\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\ticon={infos.isKing ? 'chess-king' : 'chess-pawn'}\n\t\t\t\t\tcolor={infos.status === SquareStatus.Black ? 'black' : 'white'}\n\t\t\t\t\tsize={'2x'}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\tconst isSelected =\n\t\t\tinfos.x === selectedCoord.coordinate?.x &&\n\t\t\tinfos.y === selectedCoord.coordinate?.y\n\t\t\t\t? true\n\t\t\t\t: false;\n\t\tconst isSelectedCSS = isSelected ? ' selected' : '';\n\t\tlet isAvailable = false;\n\t\tif (!isSelected && selectedCoord.availables) {\n\t\t\tfor (let i = 0; i < selectedCoord.availables.length; i++) {\n\t\t\t\tif (\n\t\t\t\t\tinfos.x === selectedCoord.availables[i].x &&\n\t\t\t\t\tinfos.y === selectedCoord.availables[i].y\n\t\t\t\t) {\n\t\t\t\t\tisAvailable = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst isAvailableCSS = isAvailable ? ' available' : '';\n\t\treturn (\n\t\t\t<button\n\t\t\t\tkey={infos.id}\n\t\t\t\tclassName={'square' + `${isSelectedCSS}` + `${isAvailableCSS}`}\n\t\t\t\tonClick={async () => {\n\t\t\t\t\tif (board) {\n\t\t\t\t\t\tconsole.log('clicked on square: ', board[infos.x][infos.y]);\n\t\t\t\t\t}\n\t\t\t\t\tif (!boardState.active) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t//If a blank square is clicked and it is not available, clear movement options OR\n\t\t\t\t\t//If there is a selected square, and it is clicked again, clean movement options\n\t\t\t\t\tif ((isEmpty && !isAvailable) || isSelected) {\n\t\t\t\t\t\t//console.log('Cleaning!');\n\t\t\t\t\t\tcleanSelected();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//When turn 1, only allow whites to move\n\t\t\t\t\t\t//When turn 2, only allow blacks to move\n\t\t\t\t\t\t//If a piece is already selected, allow movement\n\t\t\t\t\t\tconst player1turn = turn === Turn.Player1 ? true : false;\n\t\t\t\t\t\tconst player1Piece =\n\t\t\t\t\t\t\tboard && board[infos.x][infos.y].status === SquareStatus.White\n\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t: false;\n\t\t\t\t\t\tconst player2turn = turn === Turn.Player2 ? true : false;\n\t\t\t\t\t\tconst player2Piece =\n\t\t\t\t\t\t\tboard && board[infos.x][infos.y].status === SquareStatus.Black\n\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t: false;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t(player1turn && player1Piece) ||\n\t\t\t\t\t\t\t(player2turn && player2Piece) ||\n\t\t\t\t\t\t\t(board && board[infos.x][infos.y].status === SquareStatus.Free)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t//console.log('Player selecting own piece!');\n\t\t\t\t\t\t\t//Check if player already has a selected piece or not\n\t\t\t\t\t\t\t//if it already have, he is moving or changing piece\n\t\t\t\t\t\t\tif (selectedCoord.coordinate) {\n\t\t\t\t\t\t\t\t//\tconsole.log('A piece is already selected!');\n\t\t\t\t\t\t\t\t//changing place\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tselectedCoord?.coordinate?.x &&\n\t\t\t\t\t\t\t\t\tselectedCoord?.coordinate?.y &&\n\t\t\t\t\t\t\t\t\tboard &&\n\t\t\t\t\t\t\t\t\tboard[selectedCoord?.coordinate?.x][\n\t\t\t\t\t\t\t\t\t\tselectedCoord.coordinate.y\n\t\t\t\t\t\t\t\t\t].status === board[infos.x][infos.y].status\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t//console.log('Starting selected piece change logic!');\n\t\t\t\t\t\t\t\t\t//player turn with already selected piece, changing selected piece\n\t\t\t\t\t\t\t\t\tsetSelectedCoord({\n\t\t\t\t\t\t\t\t\t\tcoordinate: { x: infos.x, y: infos.y },\n\t\t\t\t\t\t\t\t\t\tavailables: processAvailables(infos.x, infos.y),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t//console.log('Starting move piece logic!');\n\t\t\t\t\t\t\t\t\t// is the desired place available?\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tboard &&\n\t\t\t\t\t\t\t\t\t\tisAvailable &&\n\t\t\t\t\t\t\t\t\t\t(selectedCoord?.coordinate?.x ||\n\t\t\t\t\t\t\t\t\t\t\tselectedCoord?.coordinate?.x === 0) &&\n\t\t\t\t\t\t\t\t\t\t(selectedCoord?.coordinate?.y ||\n\t\t\t\t\t\t\t\t\t\t\tselectedCoord?.coordinate?.y === 0)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t//move\n\t\t\t\t\t\t\t\t\t\tlet newBoard = board.map((row) => row.slice());\n\t\t\t\t\t\t\t\t\t\tconst selectedRef =\n\t\t\t\t\t\t\t\t\t\t\tboard[selectedCoord?.coordinate?.x][\n\t\t\t\t\t\t\t\t\t\t\t\tselectedCoord.coordinate.y\n\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\tnewBoard[infos.x][infos.y] = {\n\t\t\t\t\t\t\t\t\t\t\t...infos,\n\t\t\t\t\t\t\t\t\t\t\tisKing: selectedRef.isKing,\n\t\t\t\t\t\t\t\t\t\t\tstatus: selectedRef.status,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tnewBoard[selectedCoord?.coordinate?.x][\n\t\t\t\t\t\t\t\t\t\t\tselectedCoord?.coordinate?.y\n\t\t\t\t\t\t\t\t\t\t] = {\n\t\t\t\t\t\t\t\t\t\t\t...selectedRef,\n\t\t\t\t\t\t\t\t\t\t\tisKing: infos.isKing,\n\t\t\t\t\t\t\t\t\t\t\tstatus: infos.status,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t//Rules\n\t\t\t\t\t\t\t\t\t\tconst newInfo = newBoard[infos.x][infos.y];\n\t\t\t\t\t\t\t\t\t\t//around bottom\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tnewInfo.x < 11 &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x + 1][newInfo.y].status !==\n\t\t\t\t\t\t\t\t\t\t\t\tSquareStatus.Free &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x + 1][newInfo.y].status !==\n\t\t\t\t\t\t\t\t\t\t\t\tnewInfo.status &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x + 2][newInfo.y].status ===\n\t\t\t\t\t\t\t\t\t\t\t\tnewInfo.status\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x + 1][newInfo.y].status =\n\t\t\t\t\t\t\t\t\t\t\t\tSquareStatus.Free;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t//around top\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tnewInfo.x > 1 &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x - 1][newInfo.y].status !==\n\t\t\t\t\t\t\t\t\t\t\t\tSquareStatus.Free &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x - 1][newInfo.y].status !==\n\t\t\t\t\t\t\t\t\t\t\t\tnewInfo.status &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x - 2][newInfo.y].status ===\n\t\t\t\t\t\t\t\t\t\t\t\tnewInfo.status\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x - 1][newInfo.y].status =\n\t\t\t\t\t\t\t\t\t\t\t\tSquareStatus.Free;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t//around left\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tnewInfo.y > 1 &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y - 1].status !==\n\t\t\t\t\t\t\t\t\t\t\t\tSquareStatus.Free &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y - 1].status !==\n\t\t\t\t\t\t\t\t\t\t\t\tnewInfo.status &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y - 2].status ===\n\t\t\t\t\t\t\t\t\t\t\t\tnewInfo.status\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y - 1].status =\n\t\t\t\t\t\t\t\t\t\t\t\tSquareStatus.Free;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t//around right\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tnewInfo.y < 11 &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y + 1].status !==\n\t\t\t\t\t\t\t\t\t\t\t\tSquareStatus.Free &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y + 1].status !==\n\t\t\t\t\t\t\t\t\t\t\t\tnewInfo.status &&\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y + 2].status ===\n\t\t\t\t\t\t\t\t\t\t\t\tnewInfo.status\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y + 1].status =\n\t\t\t\t\t\t\t\t\t\t\t\tSquareStatus.Free;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t//Rules end\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y].isKing &&\n\t\t\t\t\t\t\t\t\t\t\tisCorner(\n\t\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y].x,\n\t\t\t\t\t\t\t\t\t\t\t\tnewBoard[newInfo.x][newInfo.y].y\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tsetBoardState({\n\t\t\t\t\t\t\t\t\t\t\t\t...boardState,\n\t\t\t\t\t\t\t\t\t\t\t\tactive: false,\n\t\t\t\t\t\t\t\t\t\t\t\twinner: turn,\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tchangeTurn();\n\t\t\t\t\t\t\t\t\t\tsetBoard(newBoard);\n\t\t\t\t\t\t\t\t\t\tcleanSelected();\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tconsole.log('devia ter mexido');\n\t\t\t\t\t\t\t\t\t\tconsole.log(board, isAvailable, selectedCoord);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//not moving\n\t\t\t\t\t\t\t\t//if it is not yet selected, select and process available moves\n\t\t\t\t\t\t\t\t//proccess available positions\n\t\t\t\t\t\t\t\t//\tconsole.log('First selection, processing available moves.');\n\t\t\t\t\t\t\t\tsetSelectedCoord({\n\t\t\t\t\t\t\t\t\tcoordinate: { x: infos.x, y: infos.y },\n\t\t\t\t\t\t\t\t\tavailables: processAvailables(infos.x, infos.y),\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('q?');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{content}\n\t\t\t</button>\n\t\t);\n\t}\n\n\tfunction printBoard() {\n\t\tconst boardToPrint = [];\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tconst row = [];\n\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\tif (board) {\n\t\t\t\t\trow.push(renderSquare(board[i][j]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tboardToPrint.push(\n\t\t\t\t<div key={'row' + i} className=\"tableRow\">\n\t\t\t\t\t{row}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn boardToPrint;\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"table\">\n\t\t\t\t<span>Jogador: {turn === Turn.Player1 ? 'Player 1' : 'Player 2'}</span>\n\t\t\t\t{!boardState.active ? (\n\t\t\t\t\t<span>\n\t\t\t\t\t\tVencedor:{' '}\n\t\t\t\t\t\t{boardState.winner === Turn.Player1 ? 'Player 1' : 'Player 2'}\n\t\t\t\t\t</span>\n\t\t\t\t) : null}\n\t\t\t\t{board ? printBoard() : <span>Carregando tabuleiro.</span>}\n\t\t\t\t<button onClick={reset}>reset</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}